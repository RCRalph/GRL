<lower_letter> ::= "a" | "b" | "c" | ... | "z"
<upper_letter> ::= "A" | "B" | "C" | ... | "Z"
<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
<underscore> ::= "_"
<dot> ::= "."
<identifier_character> ::= <lower_letter> | <underscore>
<identifier_character_or_digit> ::= <identifier_character> | <digit>

<symbol> ::= <lower_letter> | <upper_letter> | <digit> | <underscore> | <dot>
<text> ::= "" | <text> <symbol>
<string> ::= '"' <text> '"'

<identifier> ::= <identifier_character> | <identifier> <identifier_character_or_digit>
<bool_literal> ::= "TRUE" | "FALSE"

<number> ::= <digit> | <number> <digit> | <number> <dot> <number>

<comparable> ::= <identifier> | <bool_literal> | <number> | <number_value>
<comparison> ::= <comparable> "EQ" <comparable>
               | <comparable> "NEQ" <comparable>
               | <comparable> "LT" <comparable>
               | <comparable> "LEQ" <comparable>
               | <comparable> "GT" <comparable>
               | <comparable> "GEQ" <comparable>

<includes_check> ::= "HAS NODE" <string> <identifier> | "HAS EDGE" <string> <identifier>
<bool_expr> ::= <bool_literal> | <comparison> | <includes_check>

<graph_operation> ::= "GRAPH" <identifier>
                    | "DIGRAPH" <identifier>
                    | "RM GRAPH" <identifier>

<node_operation> ::= "ADD NODE" <string> <identifier>
                   | "RM NODE" <string> <identifier>

<edge_operation> ::= "ADD EDGE" <string> <string> <identifier>
                   | "RM EDGE" <string> <string> <identifier>
                   | "SET WEIGHT" <string> <string> <number> <identifier>

<number_value> ::= "GET WEIGHT" <string> <string> <identifier>
                 | "DISTANCE" <string> <string> <identifier>

<single_iterator> ::= "NODES" <identifier>
                    | "TOPOLOGICAL SORT" <identifier>
                    | "SHORTEST PATH" <string> <string> <identifier>
                    | "NEIGHBORS" <string> <identifier>

<double_iterator> ::= "EDGES" <identifier>
                    | "DISTANCE FROM" <string> <identifier>

<triple_iterator> ::= "DISTANCE MATRIX" <identifier>

<if_statement> ::= "IF" "(" <bool_expr> ")" "{" <program> "}"
                 | "IF" "(" <bool_expr> ")" "{" <program> "}" <elseif_statement>
                 | "IF" "(" <bool_expr> ")" "{" <program> "}" <else_statement>

<elseif_statement> ::= "ELSEIF" "(" <bool_expr> ")" "{" <program> "}" | <elseif_statement> <elseif_statement> | <elseif_statement> <else_statement>
<else_statement> ::= "ELSE" "{" <program> "}"

<for_loop> ::= "FOR" <identifier> "OF" <single_iterator> "{" <program> "}"
             | "FOR" <identifier> "," <identifier> "OF" <double_iterator> "{" <program> "}"
             | "FOR" <identifier> "," <identifier> "," <identifier> "OF" <triple_iterator> "{" <program> "}"

<control_flow> ::= <if_statement> | <for_loop>

<print> ::= "PRINT" <comparable>
<export> ::= "EXPORT" <identifier> <string>
<import> ::= "IMPORT" <identifier> <string>

<statement> ::= <graph_operation> | <node_operation> | <edge_operation> | <control_flow> | <print> | <export> | <import>
<program> ::= <statement> | <statement> <program>
